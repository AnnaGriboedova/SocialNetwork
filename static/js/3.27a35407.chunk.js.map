{"version":3,"sources":["../node_modules/redux-form/es/formValueSelector.js","../node_modules/redux-form/es/createFormValueSelector.js","components/Profile/Profile.module.scss","components/Profile/MyPosts/MyPosts.module.scss","components/common/Emoji/EmojiContainer.module.scss","assets/img/icons/thinking.svg","assets/img/icons/edit.svg","assets/img/icons/soc-network/instagram.svg","assets/img/icons/soc-network/vk.svg","assets/img/icons/soc-network/twitter.svg","assets/img/icons/soc-network/facebook.svg","assets/img/icons/soc-network/github.svg","assets/img/icons/soc-network/youtube.svg","components/Profile/MyPosts/Post/Post.module.scss","assets/img/icons/emoji/smile1.svg","assets/img/icons/emoji/like.svg","assets/img/icons/emoji/footprint.svg","assets/img/icons/emoji/cupcake.svg","assets/img/icons/emoji/earth.svg","assets/img/icons/emoji/ball.svg","assets/img/icons/emoji/t-shirt.svg","assets/img/icons/emoji/faq.svg","assets/img/icons/emoji/flag.svg","assets/img/icons/emoji/more.svg","assets/img/icons/smile.svg","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfoEdit.jsx","components/Profile/MyPosts/Post/Post.jsx","components/common/Emoji/EmojiList.jsx","components/common/Emoji/Emoji.jsx","hooks/useOnClickOutside.js","components/Profile/MyPosts/AddPostForm.jsx","components/Profile/MyPosts/MyPosts.jsx","redux/profileSelectors.js","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","redux/authSelectors.js","components/Profile/ProfileContainer.jsx"],"names":["createFormValueSelector","_ref","getIn","form","getFormState","invariant","nonNullGetFormState","state","_len","arguments","length","fields","Array","_key","reduce","accumulator","field","value","undefined","plain","setIn","module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","className","s","profileStatusWrap","profileStatusContainer","profileStatusIcon","style","backgroundImage","thinkingIcon","profileStatus","onDoubleClick","onChange","e","currentTarget","autoFocus","onBlur","updateStatus","ProfileInfoReduxForm","reduxForm","contacts","userProfile","onSubmit","handleSubmit","Field","component","Input","name","validate","required","type","Textarea","Object","keys","map","key","error","styles","summaryError","ProfileInfoEdit","Preloader","isUpdateProfile","initialValues","values","saveProfile","then","deactivateProfileEdit","Post","post","src","message","like","EmojiButtons","emojisByCategory","setCurrentCategory","currentCategory","emojiCategoryIcons","smile","footprint","cupcake","earth","ball","tshirt","faq","flag","buttonsWrap","category","buttonWrap","onClick","categorySlug","cn","button","active","BtnIcon","more","Emoji","allEmojis","getSubcategoryEmojis","change","isFetching","setIsFetching","cat","filter","subcategoryEmojis","emoji","id","listScrollWrap","list","EmojiItem","role","aria-label","slug","aria-hidden","emojiCharacter","character","EmojiList","listWrap","connect","app","initEmojisByCategory","ref","useRef","handler","listener","event","current","contains","target","document","addEventListener","removeEventListener","useOnClickOutside","setIsEmojiOpen","isEmojiOpen","wrap","openBtn","preventDefault","AddPostForm","isFormOpen","newPostText","setIsFormOpen","open","postInfo","UserSmallPhoto","photo","authUserProfile","photos","small","circle","size","messageWrap","onFocus","blurFieldValue","placeholder","userName","messageInput","newVal","changeFieldValue","sendPost","sendBtn","selector","formValueSelector","MyPosts","React","memo","postsElements","posts","p","likesCount","createRef","postsWrapper","math","console","log","add","fullName","getUserProfileSelector","profilePage","MyPostsContainer","auth","dispatch","formName","fieldName","newFieldValue","blur","addPost","addPostActionCreator","ProfileInfo","lookingForAJob","lookingForAJobDescription","isEmptyContactsArrValues","aboutMe","some","socNetworkIcons","vk","instagram","twitter","facebook","github","youtube","infoWrap","profileInfoBlockWrap","profileInfoBlock__title","profileInfoBlock__desc","constructor","contactWrap","contact","href","contactIcon","ProfileInfoContainer","isProfileEdit","setIsProfileEdit","activateProfileEdit","profileWrap","profileInfoWrap","profilePhotoWrap","profilePhoto","large","userPhoto","isOwner","profilePhotoInput","files","savePhoto","profileInfo","profileFullName","profileInfo__item","profileEditBtn","profileEditIcon","editIcon","profileColumnsWrap","Profile","getAuthUserId","userId","ProfileContainer","this","match","params","authUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","isAuth","withRouter"],"mappings":"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","file":"static/js/3.27a35407.chunk.js","sourcesContent":["import createFormValueSelector from './createFormValueSelector';\nimport plain from './structure/plain';\nexport default createFormValueSelector(plain);","import invariant from 'invariant';\nimport plain from './structure/plain';\nexport default function createFormValueSelector(_ref) {\n  var getIn = _ref.getIn;\n  return function (form, getFormState) {\n    invariant(form, 'Form value must be specified');\n\n    var nonNullGetFormState = getFormState || function (state) {\n      return getIn(state, 'form');\n    };\n\n    return function (state) {\n      for (var _len = arguments.length, fields = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        fields[_key - 1] = arguments[_key];\n      }\n\n      invariant(fields.length, 'No fields specified');\n      return fields.length === 1 ? // only selecting one field, so return its value\n      getIn(nonNullGetFormState(state), form + \".values.\" + fields[0]) : // selecting many fields, so return an object of field values\n      fields.reduce(function (accumulator, field) {\n        var value = getIn(nonNullGetFormState(state), form + \".values.\" + field);\n        return value === undefined ? accumulator : plain.setIn(accumulator, field, value);\n      }, {});\n    };\n  };\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"image\":\"Profile_image__1lKYQ\",\"profileWrap\":\"Profile_profileWrap__4QSCb\",\"infoWrap\":\"Profile_infoWrap__35zIN\",\"profileEditBtn\":\"Profile_profileEditBtn__3j8rK\",\"profileEditIcon\":\"Profile_profileEditIcon__27v1G\",\"profileColumnsWrap\":\"Profile_profileColumnsWrap__1zGkZ\",\"profileInfoWrap\":\"Profile_profileInfoWrap__2Fu_x\",\"profileInfo\":\"Profile_profileInfo__38_tu\",\"profilePhotoWrap\":\"Profile_profilePhotoWrap__3Drsj\",\"profilePhoto\":\"Profile_profilePhoto__T8iHO\",\"profilePhotoInput\":\"Profile_profilePhotoInput__1Smoz\",\"profileFullName\":\"Profile_profileFullName__3W8Iy\",\"profileStatusWrap\":\"Profile_profileStatusWrap__1a3g4\",\"profileStatusContainer\":\"Profile_profileStatusContainer__1R_iw\",\"profileStatusIcon\":\"Profile_profileStatusIcon__1eTMl\",\"profileStatus\":\"Profile_profileStatus__LHDRn\",\"profileInfoBlockWrap\":\"Profile_profileInfoBlockWrap__3Umou\",\"profileInfoBlock__title\":\"Profile_profileInfoBlock__title__AIQ99\",\"profileInfoBlock__desc\":\"Profile_profileInfoBlock__desc__2F52l\",\"contacts\":\"Profile_contacts__yg1ch\",\"contactWrap\":\"Profile_contactWrap__2QqWE\",\"contact\":\"Profile_contact__2Roal\",\"contactIcon\":\"Profile_contactIcon__1CHIY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsWrapper\":\"MyPosts_postsWrapper__-_att\",\"form\":\"MyPosts_form__1m9EK\",\"open\":\"MyPosts_open__sLTrD\",\"postInfo\":\"MyPosts_postInfo__3By3z\",\"messageInput\":\"MyPosts_messageInput__3G8i3\",\"messageWrap\":\"MyPosts_messageWrap__28nVn\",\"sendPost\":\"MyPosts_sendPost__yQred\",\"sendBtn\":\"MyPosts_sendBtn__BxD6R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"EmojiContainer_wrap__vNtaJ\",\"openBtn\":\"EmojiContainer_openBtn__1Jrut\",\"listWrap\":\"EmojiContainer_listWrap__3choq\",\"buttonsWrap\":\"EmojiContainer_buttonsWrap__PzgIm\",\"button\":\"EmojiContainer_button__HooHM\",\"BtnIcon\":\"EmojiContainer_BtnIcon__2Btiu\",\"active\":\"EmojiContainer_active__1mTXq\",\"listScrollWrap\":\"EmojiContainer_listScrollWrap__1KdVD\",\"list\":\"EmojiContainer_list__1fgEi\",\"emoji\":\"EmojiContainer_emoji__1I0Aq\"};","module.exports = __webpack_public_path__ + \"static/media/thinking.2633d732.svg\";","module.exports = __webpack_public_path__ + \"static/media/edit.e720936c.svg\";","module.exports = __webpack_public_path__ + \"static/media/instagram.7addff74.svg\";","module.exports = __webpack_public_path__ + \"static/media/vk.f7c8a4b9.svg\";","module.exports = __webpack_public_path__ + \"static/media/twitter.eeda54ff.svg\";","module.exports = __webpack_public_path__ + \"static/media/facebook.dee886ce.svg\";","module.exports = __webpack_public_path__ + \"static/media/github.7dea87fd.svg\";","module.exports = __webpack_public_path__ + \"static/media/youtube.22655211.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__K_baX\"};","module.exports = __webpack_public_path__ + \"static/media/smile1.58ec9f26.svg\";","module.exports = __webpack_public_path__ + \"static/media/like.d411fef8.svg\";","module.exports = __webpack_public_path__ + \"static/media/footprint.0dd82fda.svg\";","module.exports = __webpack_public_path__ + \"static/media/cupcake.794e6356.svg\";","module.exports = __webpack_public_path__ + \"static/media/earth.24cb9523.svg\";","module.exports = __webpack_public_path__ + \"static/media/ball.6a38616c.svg\";","module.exports = __webpack_public_path__ + \"static/media/t-shirt.f7bd3ca4.svg\";","module.exports = __webpack_public_path__ + \"static/media/faq.b938b69d.svg\";","module.exports = __webpack_public_path__ + \"static/media/flag.844006a1.svg\";","module.exports = __webpack_public_path__ + \"static/media/more.2822fb05.svg\";","module.exports = __webpack_public_path__ + \"static/media/smile.88ab0180.svg\";","import React, {useState, useEffect} from 'react';\r\nimport s from '../Profile.module.scss'\r\n\r\nimport thinkingIcon from \"../../../assets/img/icons/thinking.svg\"\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    };\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status)\r\n    };\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value)\r\n    };\r\n\r\n    return (\r\n        <div className={s.profileStatusWrap}>\r\n            {!editMode &&\r\n            <span className={s.profileStatusContainer}>\r\n                <span className={s.profileStatusIcon} style={{backgroundImage: `url(${thinkingIcon})`}}></span>\r\n                <span className={s.profileStatus} onDoubleClick={activateEditMode}>{props.status || '---------'}</span>\r\n            </span>\r\n            }\r\n            {editMode &&\r\n\r\n            <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\r\n                   value={status}/>\r\n\r\n            }\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react'\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Input, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../../utils/validators/validators\";\r\nimport styles from \"../../common/FormsControls/FormsControls.module.scss\";\r\n\r\nconst ProfileInfoEdit = (props) => {\r\n    if (!props.userProfile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onSubmit = (values) => {\r\n        props.saveProfile(values).then(() => {\r\n            props.deactivateProfileEdit();\r\n        })\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {props.isUpdateProfile && <Preloader/>}\r\n            <ProfileInfoReduxForm initialValues={props.userProfile} userProfile={props.userProfile}\r\n                                  onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst ProfileInfoForm = (props) => {\r\n    const contacts = props.userProfile.contacts;\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n\r\n            <div>\r\n                full Name: <span>\r\n                    <Field component={Input} name={'fullName'} validate={required} type=\"text\"/>\r\n                </span>\r\n            </div>\r\n\r\n            <div>\r\n                About Me:\r\n                <span>\r\n                    <Field component={Textarea} name={'aboutMe'} validate={required}/>\r\n                </span>\r\n            </div>\r\n\r\n            <div>\r\n                Looking For A Job:\r\n                <span>\r\n                    <Field component={Input} name={'lookingForAJob'} type=\"checkbox\"/>YES\r\n                </span>\r\n            </div>\r\n\r\n            <div>\r\n                Looking For A Job Description:\r\n                <span>\r\n                    <Field component={Textarea} name={'lookingForAJobDescription'} validate={required}/>\r\n                </span>\r\n            </div>\r\n\r\n            <div>\r\n                <b>Contacts</b>:\r\n                {Object.keys(contacts).map(key => {\r\n                    return <div>\r\n                        {key}:\r\n                        <span>\r\n                            <Field component={Input} name={\"contacts.\" + key} type=\"text\"/>\r\n                        </span>\r\n                    </div>\r\n                })}\r\n            </div>\r\n\r\n            <button>SAVE</button>\r\n\r\n            {props.error && <div className={styles.summaryError}>\r\n                {\r\n                    props.error\r\n                }\r\n            </div>}\r\n        </form>\r\n    )\r\n};\r\n\r\nconst ProfileInfoReduxForm = reduxForm({\r\n    form: 'profileInfoForm'\r\n})(ProfileInfoForm);\r\n\r\nexport default ProfileInfoEdit;","import React from 'react'\r\nimport s from './Post.module.scss'\r\n\r\nconst Post = (props) => {\r\n  return (\r\n      <div className={s.post}>\r\n          <img src={'https://peopletalk.ru/wp-content/uploads/2016/11/1480331127.jpg'}/>\r\n          {props.message}\r\n        <div>\r\n          <span>{props.like} like</span>\r\n        </div>\r\n      </div>\r\n  )\r\n};\r\n\r\nexport default Post;","import React, {useState, useEffect} from 'react';\r\nimport s from './EmojiContainer.module.scss';\r\nimport cn from 'classnames'\r\nimport smile from '../../../assets/img/icons/emoji/smile1.svg'\r\nimport like from '../../../assets/img/icons/emoji/like.svg'\r\nimport footprint from '../../../assets/img/icons/emoji/footprint.svg'\r\nimport cupcake from '../../../assets/img/icons/emoji/cupcake.svg'\r\nimport earth from '../../../assets/img/icons/emoji/earth.svg'\r\nimport ball from '../../../assets/img/icons/emoji/ball.svg'\r\nimport tshirt from '../../../assets/img/icons/emoji/t-shirt.svg'\r\nimport faq from '../../../assets/img/icons/emoji/faq.svg'\r\nimport flag from '../../../assets/img/icons/emoji/flag.svg'\r\nimport more from '../../../assets/img/icons/emoji/more.svg'\r\nimport Preloader from \"../Preloader/Preloader\";\r\n\r\nconst EmojiList = ({emojisByCategory, getSubcategoryEmojis, change}) => {\r\n    let [currentCategory, setCurrentCategory] = useState('');\r\n\r\n    useEffect(() => {\r\n        setCurrentCategory(emojisByCategory[0].categorySlug)\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <div className={s.listWrap}>\r\n\r\n            <EmojiButtons emojisByCategory={emojisByCategory} setCurrentCategory={setCurrentCategory}\r\n                          currentCategory={currentCategory}/>\r\n\r\n            {\r\n                currentCategory && <Emoji emojisByCategory={emojisByCategory} currentCategory={currentCategory}\r\n                                          getSubcategoryEmojis={getSubcategoryEmojis} change={change}/>\r\n            }\r\n\r\n        </div>\r\n\r\n    )\r\n\r\n};\r\n\r\nconst EmojiButtons = ({emojisByCategory, setCurrentCategory, currentCategory}) => {\r\n    let emojiCategoryIcons = {\r\n        \"smileys-emotion\": smile,\r\n        \"people-body\": like,\r\n        \"animals-nature\": footprint,\r\n        \"food-drink\": cupcake,\r\n        \"travel-places\": earth,\r\n        \"activities\": ball,\r\n        \"objects\": tshirt,\r\n        \"symbols\": faq,\r\n        \"flags\": flag\r\n    };\r\n    const onClick = (categorySlug) => {\r\n        setCurrentCategory(categorySlug);\r\n    };\r\n\r\n    return <div className={s.buttonsWrap}>\r\n        {emojisByCategory.map((category) => {\r\n            return (\r\n                <div className={s.buttonWrap}>\r\n                    <button onClick={() => {\r\n                        onClick(category['categorySlug']);\r\n                    }}\r\n                            className={cn(s.button, currentCategory === category.categorySlug && s.active)}>\r\n                        <span className={s.BtnIcon}\r\n                              style={{backgroundImage: `url(${emojiCategoryIcons[category.categorySlug] || more})`}}/>\r\n                    </button>\r\n                </div>\r\n\r\n            )\r\n        })}\r\n    </div>\r\n};\r\n\r\nconst Emoji = ({emojisByCategory, currentCategory, getSubcategoryEmojis, change}) => {\r\n    let [isFetching, setIsFetching] = useState(false);\r\n\r\n\r\n    let allEmojis;\r\n\r\n    let cat = emojisByCategory.filter(category =>\r\n        category.categorySlug === currentCategory\r\n    );\r\n    let error = '';\r\n\r\n    if (!cat[0].subcategoryEmojis) {\r\n        if (!isFetching && !error) {\r\n            setIsFetching(true);\r\n            getSubcategoryEmojis(currentCategory).then((value) => {\r\n                setIsFetching(false);\r\n            }, (value) => {\r\n                debugger\r\n                error = value || 'что-то пошло не так..';\r\n                setIsFetching(false);\r\n\r\n            })\r\n        }\r\n    } else {\r\n        allEmojis = cat[0].subcategoryEmojis.map(emoji =>\r\n            <EmojiItem change={change} key={emoji.id} emoji={emoji}/>\r\n        );\r\n    }\r\n\r\n\r\n    return <div className={s.listScrollWrap}>\r\n        <div className={s.list}>\r\n            {\r\n                allEmojis || (isFetching && <Preloader/>) || error\r\n\r\n\r\n            }\r\n        </div>\r\n    </div>\r\n};\r\n\r\n\r\nconst EmojiItem = ({emoji, change}) => {\r\n\r\n    const onEmojiClick = (emojiCharacter) => {\r\n        change(emojiCharacter)\r\n    };\r\n\r\n    return <span\r\n        className={s.emoji}\r\n        role=\"img\"\r\n        aria-label={emoji.slug && emoji.slug}\r\n        aria-hidden={!emoji.slug}\r\n        onClick={() => {\r\n            onEmojiClick(emoji.character)\r\n        }}\r\n    >\r\n        {emoji.character}\r\n    </span>\r\n};\r\n\r\n\r\nexport default EmojiList;\r\n","import React, {useState, useEffect, useRef} from 'react';\r\nimport s from './EmojiContainer.module.scss';\r\nimport {connect} from \"react-redux\";\r\nimport {getSubcategoryEmojis, initEmojisByCategory} from \"../../../redux/appReducer\";\r\nimport EmojiList from \"./EmojiList\";\r\nimport smile from \"../../../assets/img/icons/smile.svg\";\r\nimport useOnClickOutside from \"../../../hooks/useOnClickOutside\";\r\n\r\nconst EmojiContainer = ({emojisByCategory, initEmojisByCategory, getSubcategoryEmojis, change}) => {\r\n    const ref = useRef();\r\n\r\n    useOnClickOutside(ref, () => setIsEmojiOpen(false));\r\n\r\n    let [isEmojiOpen, setIsEmojiOpen] = useState(false);\r\n\r\n    const onEmojiBtnClick = (e) => {\r\n        e.preventDefault();\r\n        if (!isEmojiOpen) {\r\n            if (!emojisByCategory.length) {\r\n                initEmojisByCategory().then(() => {\r\n                    setIsEmojiOpen(true)\r\n                })\r\n            } else {\r\n                setIsEmojiOpen(true)\r\n            }\r\n        } else {\r\n            setIsEmojiOpen(false)\r\n        }\r\n    };\r\n\r\n    return (<div ref={ref} className={s.wrap}>\r\n        <button className={s.openBtn} onClick={onEmojiBtnClick}><img src={smile}/></button>\r\n\r\n        {isEmojiOpen && emojisByCategory &&\r\n        <EmojiList change={change} getSubcategoryEmojis={getSubcategoryEmojis} emojisByCategory={emojisByCategory}/>}\r\n    </div>)\r\n\r\n};\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        emojisByCategory: state.app.emojisByCategory\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n    initEmojisByCategory,\r\n    getSubcategoryEmojis\r\n})(EmojiContainer);\r\n","import { useEffect} from 'react';\r\n\r\nexport default function useOnClickOutside(ref, handler) {\r\n    useEffect(\r\n        () => {\r\n            const listener = event => {\r\n                if (!ref.current || ref.current.contains(event.target)) {\r\n                    return;\r\n                }\r\n\r\n                handler(event);\r\n            };\r\n\r\n            document.addEventListener('mousedown', listener);\r\n            document.addEventListener('touchstart', listener);\r\n\r\n            return () => {\r\n                document.removeEventListener('mousedown', listener);\r\n                document.removeEventListener('touchstart', listener);\r\n            };\r\n        },\r\n        [ref, handler]\r\n    );\r\n}","import React, {useEffect, useState} from 'react'\r\nimport s from './MyPosts.module.scss'\r\nimport {Field, reduxForm, change, formValueSelector} from \"redux-form\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport cn from 'classnames'\r\nimport UserSmallPhoto from \"../../common/UserSmallPhoto/UserSmallPhoto\";\r\nimport Emoji from \"../../common/Emoji/Emoji\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nlet AddPostForm = (props) => {\r\n\r\n    useEffect(() => {\r\n        if (!isFormOpen && props.newPostText) {\r\n            setIsFormOpen(true);\r\n        }\r\n    }, [props.newPostText]);\r\n\r\n    let [isFormOpen, setIsFormOpen] = useState(false);\r\n\r\n    const onBlur = (e) => {\r\n        e.preventDefault();\r\n\r\n        props.blurFieldValue('profileAddPostForm', 'newPostText');\r\n\r\n        if (!e.target.value) {\r\n            setIsFormOpen(false)\r\n        }\r\n\r\n    };\r\n\r\n    const onFocus = (e) => {\r\n        setIsFormOpen(true);\r\n    };\r\n    const change = (newVal) => {\r\n        props.changeFieldValue('profileAddPostForm', 'newPostText', (props.newPostText || '') + newVal);\r\n    };\r\n\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit} className={cn('infoBlock', s.form, isFormOpen && s.open)}>\r\n            <div className={s.postInfo}>\r\n                <UserSmallPhoto photo={props.authUserProfile.photos.small} styles={{circle: true, size: 'sm'}}/>\r\n                <div className={cn(s.messageWrap)}>\r\n\r\n                    <Field onFocus={onFocus} onBlur={onBlur}\r\n                           placeholder={'Type something to ' + props.userName}\r\n                           className={cn(s.messageInput)}\r\n                           component={Textarea} name={'newPostText'}/>\r\n                </div>\r\n                <Emoji change={change}/>\r\n            </div>\r\n\r\n            {isFormOpen &&\r\n            <div className={s.sendPost}>\r\n                <button className={cn(s.sendBtn, 'button')}>Add Post</button>\r\n            </div>\r\n            }\r\n        </form>\r\n    )\r\n};\r\n\r\nAddPostForm = reduxForm({\r\n    form: 'profileAddPostForm'\r\n})(AddPostForm);\r\n\r\nconst selector = formValueSelector('profileAddPostForm');\r\nAddPostForm = connect(state => {\r\n    const newPostText = selector(state, 'newPostText');\r\n\r\n    return {\r\n        newPostText\r\n    }\r\n})(AddPostForm);\r\n\r\n\r\nexport default AddPostForm;","import React from 'react'\r\nimport s from './MyPosts.module.scss'\r\nimport Post from \"./Post/Post\";\r\nimport {maxLengthCreator} from \"../../../utils/validators/validators\";\r\nimport cn from 'classnames'\r\nimport AddPostForm from \"./AddPostForm\";\r\n\r\nconst MyPosts = React.memo(props => {\r\n    let postsElements = props.posts.map(p => <Post message={p.message} like={p.likesCount}/>);\r\n\r\n    let newPostElement = React.createRef();\r\n    const onAddPost = () => {\r\n        props.addPost();\r\n    };\r\n    const onPostChange = () => {\r\n        let text = newPostElement.current.value;\r\n        props.updateNewPostText(text);\r\n    };\r\n\r\n    const addPost = (values) => {\r\n        import(\"../../../math\").then(math => {\r\n            console.log(math.add(16, 26));\r\n        });\r\n        // props.addPost(values.newPostText);\r\n    };\r\n\r\n\r\n    return (\r\n        <div className={cn('infoBlocksWrap', s.postsWrapper)}>\r\n            <AddPostForm userProfile={props.userProfile} authUserProfile={props.authUserProfile}\r\n                         blurFieldValue={props.blurFieldValue}\r\n                         changeFieldValue={props.changeFieldValue} onSubmit={addPost}\r\n                         userName={props.userProfile.fullName}/>\r\n            <div className={cn('infoBlock', s.posts)}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\n\r\n\r\nexport default MyPosts;","export const getUserProfileSelector = state => {\r\n    return state.profilePage.userProfile;\r\n};","import React from 'react'\r\nimport {addPostActionCreator} from \"../../../redux/profileReducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {getUserProfileSelector} from \"../../../redux/profileSelectors\";\r\nimport {change, blur} from \"redux-form\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText,\r\n        authUserProfile: state.auth.authUserProfile,\r\n        userProfile: getUserProfileSelector(state),\r\n        emojisByCategory: state.app.emojisByCategory\r\n    }\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeFieldValue: (formName, fieldName, newFieldValue) => {\r\n            dispatch(change(formName, fieldName, newFieldValue))\r\n        },\r\n        blurFieldValue: (formName, fieldName, newFieldValue) => {\r\n            dispatch(blur(formName, fieldName, newFieldValue))\r\n        },\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        },\r\n\r\n    }\r\n};\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\nexport default MyPostsContainer;","import React, {useState} from 'react'\r\nimport s from '../Profile.module.scss'\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport userPhoto from '../../../assets/img/profile.png'\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport ProfileInfoEdit from \"./ProfileInfoEdit\";\r\nimport cn from 'classnames'\r\n\r\n\r\nimport editIcon from \"../../../assets/img/icons/edit.svg\"\r\n\r\nimport instagram from \"../../../assets/img/icons/soc-network/instagram.svg\"\r\nimport vk from \"../../../assets/img/icons/soc-network/vk.svg\"\r\nimport twitter from \"../../../assets/img/icons/soc-network/twitter.svg\"\r\nimport facebook from \"../../../assets/img/icons/soc-network/facebook.svg\"\r\nimport github from \"../../../assets/img/icons/soc-network/github.svg\"\r\nimport youtube from \"../../../assets/img/icons/soc-network/youtube.svg\"\r\nimport MyPostsContainer from \"../MyPosts/MyPostsContainer\";\r\n\r\n\r\nconst ProfileInfoContainer = (props) => {\r\n\r\n    let [isProfileEdit, setIsProfileEdit] = useState(false);\r\n\r\n    if (!props.userProfile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e) => {\r\n        if (e.target.files.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    };\r\n\r\n    const activateProfileEdit = (e) => {\r\n        setIsProfileEdit(true);\r\n    };\r\n    const deactivateProfileEdit = (e) => {\r\n        setIsProfileEdit(false);\r\n    };\r\n\r\n    return (\r\n        <div className={cn('infoBlocksWrap', s.profileWrap)}>\r\n            <div className={cn('infoBlock', s.profileInfoWrap)}>\r\n                <div className={s.profilePhotoWrap}>\r\n                    <img className={s.profilePhoto}\r\n                         src={props.userProfile.photos.large || userPhoto}/>\r\n                    {props.isOwner &&\r\n                    <input className={s.profilePhotoInput} type='file' onChange={onMainPhotoSelected}/>}\r\n                </div>\r\n\r\n                <div className={s.profileInfo}>\r\n                    {props.userProfile.fullName &&\r\n                    <div className={s.profileFullName}>\r\n                        {props.userProfile.fullName}\r\n                    </div>\r\n                    }\r\n\r\n                    <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n\r\n                    {props.userProfile.aboutMe &&\r\n                    <div className={s.profileInfo__item}>\r\n                        {props.userProfile.aboutMe}\r\n                    </div>\r\n                    }\r\n                </div>\r\n\r\n                <button className={s.profileEditBtn} onClick={activateProfileEdit}>\r\n                    <span className={s.profileEditIcon} style={{backgroundImage: `url(${editIcon})`}}></span>\r\n                </button>\r\n            </div>\r\n\r\n            <div className={s.profileColumnsWrap}>\r\n                {isProfileEdit ?\r\n\r\n                    <ProfileInfoEdit saveProfile={props.saveProfile} deactivateProfileEdit={deactivateProfileEdit}\r\n                                     userProfile={props.userProfile} isUpdateProfile={props.isUpdateProfile}/>\r\n                    :\r\n                    <ProfileInfo userProfile={props.userProfile} activateProfileEdit={activateProfileEdit}/>\r\n\r\n                }\r\n                <MyPostsContainer/>\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nconst ProfileInfo = (props) => {\r\n    const {lookingForAJob, lookingForAJobDescription, fullName, contacts, aboutMe} = props.userProfile;\r\n\r\n    let isEmptyContactsArrValues = !Object.values(contacts).some(value => !!value);\r\n\r\n    let socNetworkIcons = {\r\n        vk,\r\n        instagram,\r\n        twitter,\r\n        facebook,\r\n        github,\r\n        youtube\r\n    };\r\n\r\n    return <div className={s.infoWrap}>\r\n        <div className={cn('infoBlock', s.profileInfoBlockWrap)}>\r\n\r\n            <div className={s.profileInfoBlock__title}>Job</div>\r\n            <b>\r\n                Looking For A Job: {lookingForAJob ? 'yes' : 'no'}\r\n            </b>\r\n            <div className={s.profileInfoBlock__desc}>\r\n\r\n                {lookingForAJobDescription &&\r\n                <div>\r\n                    <span>{lookingForAJobDescription}</span>\r\n                </div>\r\n                }\r\n            </div>\r\n\r\n            {\r\n                Object.keys(contacts).length !== 0 && contacts.constructor === Object && !isEmptyContactsArrValues &&\r\n                <div className={s.contacts}>\r\n                    {Object.keys(contacts).map(key => {\r\n                        if (contacts[key]) {\r\n                            return <div className={s.contactWrap}>\r\n                                <a className={s.contact} href={contacts[key]}>\r\n                                    {socNetworkIcons[key] &&\r\n                                    <img className={s.contactIcon} src={socNetworkIcons[key]}/>}\r\n                                    {contacts[key]}\r\n                                </a>\r\n                            </div>\r\n                        }\r\n                        return '';\r\n                    })}\r\n                </div>\r\n            }\r\n        </div>\r\n    </div>\r\n};\r\n\r\nexport default ProfileInfoContainer;","import React from 'react'\r\nimport ProfileInfoContainer from \"./ProfileInfo/ProfileInfo\";\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n\r\n            <ProfileInfoContainer savePhoto={props.savePhoto} isOwner={props.isOwner} userProfile={props.userProfile}\r\n                                  status={props.status} updateStatus={props.updateStatus}\r\n                                  saveProfile={props.saveProfile} isUpdateProfile={props.isUpdateProfile}\r\n            />\r\n    )\r\n};\r\n\r\nexport default Profile;","export const getAuthUserId = state => {\r\n    return state.auth.userId;\r\n};","import React from 'react'\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, updateStatus, savePhoto, saveProfile} from \"../../redux/profileReducer\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {getAuthUserId} from \"../../redux/authSelectors\";\r\nimport {getUserProfileSelector} from \"../../redux/profileSelectors\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authUserId;\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n\r\n            //userId = 6268\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props} isOwner={!this.props.match.params.userId}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => (\r\n    {\r\n        userProfile: getUserProfileSelector(state),\r\n        status: state.profilePage.status,\r\n        authUserId: getAuthUserId(state),\r\n        isAuth: state.auth.isAuth,\r\n        isUpdateProfile: state.profilePage.isUpdateProfile\r\n    }\r\n);\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        getUserProfile,\r\n        getStatus,\r\n        updateStatus,\r\n        savePhoto,\r\n        saveProfile,\r\n    }),\r\n    withRouter,\r\n    //withAuthRedirect\r\n)(ProfileContainer);"],"sourceRoot":""}